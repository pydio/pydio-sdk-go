// Code generated by go-swagger; DO NOT EDIT.

package license_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewLicenseStatsParams creates a new LicenseStatsParams object
// with the default values initialized.
func NewLicenseStatsParams() *LicenseStatsParams {
	var ()
	return &LicenseStatsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLicenseStatsParamsWithTimeout creates a new LicenseStatsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLicenseStatsParamsWithTimeout(timeout time.Duration) *LicenseStatsParams {
	var ()
	return &LicenseStatsParams{

		timeout: timeout,
	}
}

// NewLicenseStatsParamsWithContext creates a new LicenseStatsParams object
// with the default values initialized, and the ability to set a context for a request
func NewLicenseStatsParamsWithContext(ctx context.Context) *LicenseStatsParams {
	var ()
	return &LicenseStatsParams{

		Context: ctx,
	}
}

// NewLicenseStatsParamsWithHTTPClient creates a new LicenseStatsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLicenseStatsParamsWithHTTPClient(client *http.Client) *LicenseStatsParams {
	var ()
	return &LicenseStatsParams{
		HTTPClient: client,
	}
}

/*LicenseStatsParams contains all the parameters to send to the API endpoint
for the license stats operation typically these are written to a http.Request
*/
type LicenseStatsParams struct {

	/*ForceRefresh*/
	ForceRefresh *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the license stats params
func (o *LicenseStatsParams) WithTimeout(timeout time.Duration) *LicenseStatsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the license stats params
func (o *LicenseStatsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the license stats params
func (o *LicenseStatsParams) WithContext(ctx context.Context) *LicenseStatsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the license stats params
func (o *LicenseStatsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the license stats params
func (o *LicenseStatsParams) WithHTTPClient(client *http.Client) *LicenseStatsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the license stats params
func (o *LicenseStatsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithForceRefresh adds the forceRefresh to the license stats params
func (o *LicenseStatsParams) WithForceRefresh(forceRefresh *bool) *LicenseStatsParams {
	o.SetForceRefresh(forceRefresh)
	return o
}

// SetForceRefresh adds the forceRefresh to the license stats params
func (o *LicenseStatsParams) SetForceRefresh(forceRefresh *bool) {
	o.ForceRefresh = forceRefresh
}

// WriteToRequest writes these params to a swagger request
func (o *LicenseStatsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ForceRefresh != nil {

		// query param ForceRefresh
		var qrForceRefresh bool
		if o.ForceRefresh != nil {
			qrForceRefresh = *o.ForceRefresh
		}
		qForceRefresh := swag.FormatBool(qrForceRefresh)
		if qForceRefresh != "" {
			if err := r.SetQueryParam("ForceRefresh", qForceRefresh); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
