// Code generated by go-swagger; DO NOT EDIT.

package enterprise_config_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteExternalDirectoryParams creates a new DeleteExternalDirectoryParams object
// with the default values initialized.
func NewDeleteExternalDirectoryParams() *DeleteExternalDirectoryParams {
	var ()
	return &DeleteExternalDirectoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteExternalDirectoryParamsWithTimeout creates a new DeleteExternalDirectoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteExternalDirectoryParamsWithTimeout(timeout time.Duration) *DeleteExternalDirectoryParams {
	var ()
	return &DeleteExternalDirectoryParams{

		timeout: timeout,
	}
}

// NewDeleteExternalDirectoryParamsWithContext creates a new DeleteExternalDirectoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteExternalDirectoryParamsWithContext(ctx context.Context) *DeleteExternalDirectoryParams {
	var ()
	return &DeleteExternalDirectoryParams{

		Context: ctx,
	}
}

// NewDeleteExternalDirectoryParamsWithHTTPClient creates a new DeleteExternalDirectoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteExternalDirectoryParamsWithHTTPClient(client *http.Client) *DeleteExternalDirectoryParams {
	var ()
	return &DeleteExternalDirectoryParams{
		HTTPClient: client,
	}
}

/*DeleteExternalDirectoryParams contains all the parameters to send to the API endpoint
for the delete external directory operation typically these are written to a http.Request
*/
type DeleteExternalDirectoryParams struct {

	/*ConfigID*/
	ConfigID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete external directory params
func (o *DeleteExternalDirectoryParams) WithTimeout(timeout time.Duration) *DeleteExternalDirectoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete external directory params
func (o *DeleteExternalDirectoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete external directory params
func (o *DeleteExternalDirectoryParams) WithContext(ctx context.Context) *DeleteExternalDirectoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete external directory params
func (o *DeleteExternalDirectoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete external directory params
func (o *DeleteExternalDirectoryParams) WithHTTPClient(client *http.Client) *DeleteExternalDirectoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete external directory params
func (o *DeleteExternalDirectoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConfigID adds the configID to the delete external directory params
func (o *DeleteExternalDirectoryParams) WithConfigID(configID string) *DeleteExternalDirectoryParams {
	o.SetConfigID(configID)
	return o
}

// SetConfigID adds the configId to the delete external directory params
func (o *DeleteExternalDirectoryParams) SetConfigID(configID string) {
	o.ConfigID = configID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteExternalDirectoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ConfigId
	if err := r.SetPathParam("ConfigId", o.ConfigID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
