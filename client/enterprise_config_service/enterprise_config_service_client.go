// Code generated by go-swagger; DO NOT EDIT.

package enterprise_config_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new enterprise config service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for enterprise config service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteExternalDirectory enterprises only delete external directory
*/
func (a *Client) DeleteExternalDirectory(params *DeleteExternalDirectoryParams) (*DeleteExternalDirectoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteExternalDirectoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteExternalDirectory",
		Method:             "DELETE",
		PathPattern:        "/config/directories/{ConfigId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteExternalDirectoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteExternalDirectoryOK), nil

}

/*
DeleteVersioningPolicy enterprises only delete a versioning policy
*/
func (a *Client) DeleteVersioningPolicy(params *DeleteVersioningPolicyParams) (*DeleteVersioningPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVersioningPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVersioningPolicy",
		Method:             "DELETE",
		PathPattern:        "/config/versioning/{Uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteVersioningPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVersioningPolicyOK), nil

}

/*
ListExternalDirectories enterprises only list additional user directories
*/
func (a *Client) ListExternalDirectories(params *ListExternalDirectoriesParams) (*ListExternalDirectoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListExternalDirectoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListExternalDirectories",
		Method:             "GET",
		PathPattern:        "/config/directories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListExternalDirectoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListExternalDirectoriesOK), nil

}

/*
PutExternalDirectory enterprises only add create an external directory
*/
func (a *Client) PutExternalDirectory(params *PutExternalDirectoryParams) (*PutExternalDirectoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutExternalDirectoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutExternalDirectory",
		Method:             "PUT",
		PathPattern:        "/config/directories/{ConfigId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PutExternalDirectoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutExternalDirectoryOK), nil

}

/*
PutVersioningPolicy enterprises only create or update a versioning policy
*/
func (a *Client) PutVersioningPolicy(params *PutVersioningPolicyParams) (*PutVersioningPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVersioningPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutVersioningPolicy",
		Method:             "POST",
		PathPattern:        "/config/versioning/{Uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PutVersioningPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutVersioningPolicyOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
