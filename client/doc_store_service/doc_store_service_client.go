// Code generated by go-swagger; DO NOT EDIT.

package doc_store_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new doc store service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for doc store service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteDoc deletes one or more docs inside a given store
*/
func (a *Client) DeleteDoc(params *DeleteDocParams) (*DeleteDocOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDocParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDoc",
		Method:             "POST",
		PathPattern:        "/docstore/bulk_delete/{StoreID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteDocReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDocOK), nil

}

/*
GetDoc loads one document by ID from a given store
*/
func (a *Client) GetDoc(params *GetDocParams) (*GetDocOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDocParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDoc",
		Method:             "GET",
		PathPattern:        "/docstore/{StoreID}/{DocumentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &GetDocReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDocOK), nil

}

/*
ListDocs lists all docs of a given store
*/
func (a *Client) ListDocs(params *ListDocsParams) (*ListDocsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDocsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListDocs",
		Method:             "POST",
		PathPattern:        "/docstore/{StoreID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListDocsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListDocsOK), nil

}

/*
PutDoc puts a document inside a given store
*/
func (a *Client) PutDoc(params *PutDocParams) (*PutDocOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDocParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDoc",
		Method:             "PUT",
		PathPattern:        "/docstore/{StoreID}/{DocumentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PutDocReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDocOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
