// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ObjectDataSource DataSource Object description
// swagger:model objectDataSource
type ObjectDataSource struct {

	// Api key
	APIKey string `json:"ApiKey,omitempty"`

	// Api secret
	APISecret string `json:"ApiSecret,omitempty"`

	// creation date
	CreationDate int32 `json:"CreationDate,omitempty"`

	// disabled
	Disabled bool `json:"Disabled,omitempty"`

	// encryption key
	EncryptionKey string `json:"EncryptionKey,omitempty"`

	// encryption mode
	EncryptionMode ObjectEncryptionMode `json:"EncryptionMode,omitempty"`

	// last synchronization date
	LastSynchronizationDate int32 `json:"LastSynchronizationDate,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// objects base folder
	ObjectsBaseFolder string `json:"ObjectsBaseFolder,omitempty"`

	// objects bucket
	ObjectsBucket string `json:"ObjectsBucket,omitempty"`

	// objects host
	ObjectsHost string `json:"ObjectsHost,omitempty"`

	// objects port
	ObjectsPort int32 `json:"ObjectsPort,omitempty"`

	// objects secure
	ObjectsSecure bool `json:"ObjectsSecure,omitempty"`

	// objects service name
	ObjectsServiceName string `json:"ObjectsServiceName,omitempty"`

	// peer address
	PeerAddress string `json:"PeerAddress,omitempty"`

	// storage configuration
	StorageConfiguration map[string]string `json:"StorageConfiguration,omitempty"`

	// storage type
	StorageType ObjectStorageType `json:"StorageType,omitempty"`

	// versioning policy name
	VersioningPolicyName string `json:"VersioningPolicyName,omitempty"`

	// watch
	Watch bool `json:"Watch,omitempty"`
}

// Validate validates this object data source
func (m *ObjectDataSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEncryptionMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectDataSource) validateEncryptionMode(formats strfmt.Registry) error {

	if swag.IsZero(m.EncryptionMode) { // not required
		return nil
	}

	if err := m.EncryptionMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("EncryptionMode")
		}
		return err
	}

	return nil
}

func (m *ObjectDataSource) validateStorageType(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageType) { // not required
		return nil
	}

	if err := m.StorageType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("StorageType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectDataSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectDataSource) UnmarshalBinary(b []byte) error {
	var res ObjectDataSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
