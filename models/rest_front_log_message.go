// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// RestFrontLogMessage Frontend message to log
// swagger:model restFrontLogMessage
type RestFrontLogMessage struct {

	// Ip
	IP string `json:"Ip,omitempty"`

	// level
	Level RestLogLevel `json:"Level,omitempty"`

	// message
	Message string `json:"Message,omitempty"`

	// nodes
	Nodes []string `json:"Nodes"`

	// prefix
	Prefix string `json:"Prefix,omitempty"`

	// source
	Source string `json:"Source,omitempty"`

	// user Id
	UserID string `json:"UserId,omitempty"`

	// workspace Id
	WorkspaceID string `json:"WorkspaceId,omitempty"`
}

// Validate validates this rest front log message
func (m *RestFrontLogMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestFrontLogMessage) validateLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.Level) { // not required
		return nil
	}

	if err := m.Level.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Level")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestFrontLogMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestFrontLogMessage) UnmarshalBinary(b []byte) error {
	var res RestFrontLogMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
