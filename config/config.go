package config

import (
	"path/filepath"
)

// SdkConfig contains necessary data to connect to Pydio Cells API.
type SdkConfig struct {
	// Protocol used: http, https or wss.
	Protocol string `json:"protocol"`
	// Url stores domain name or IP & port to the server.
	Url string `json:"url"`
	// OIDC ClientKey / ClientSecret
	ClientKey    string `json:"clientKey"`
	ClientSecret string `json:"clientSecret"`
	// Pydio User Authentication
	User     string `json:"user"`
	Password string `json:"password"`

	SkipVerify bool `json:"skipVerify"`
}

// S3Config contains the necessary data to connect to the Pydio Cells S3 gateway.
type S3Config struct {
	Bucket string `json:"bucket"`
	// Endpoint overrides the default URL generated by the S3 SDK from the bucket name.
	Endpoint string `json:"enpoint"`
	Region   string `json:"region"`
	// ApiKey is used by the Cells SDK to transmit the JWT token.
	ApiKey string `json:"apiKey"`
	// ApiSecret identifies this client.
	ApiSecret string `json:"apiSecret"`
	// Set to true to rather use legacy mode (JWT Auth is transmitted via custom 'X-Pydio-Bearer' header).
	UsePydioSpecificHeader bool `json:"usePydioSpecificHeader"`
	// IsDebug is a convenience legacy flag to add some logging to this S3 client.
	// Should be cleaned as soon as we defined the logging strategy for this repo.
	IsDebug bool `json:"isDebug"`
}

var (
	DefaultConfig   *SdkConfig
	DefaultS3Config *S3Config
)

// GetDefaultConfigFiles simply retrieves absolute path for cells and s3 SDK config
// files give the absolute path to the root of the pydio-sdk-go source code folder.
func GetDefaultConfigFiles(codeRootPath string) (string, string) {
	rpath := filepath.Join(codeRootPath, "config")
	cpath := filepath.Join(rpath, "config.json")
	s3path := filepath.Join(rpath, "config-s3.json")
	return cpath, s3path
}
